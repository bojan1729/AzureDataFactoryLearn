{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "bajlecadf"
		},
		"Inputblob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Inputblob'"
		},
		"LNK_DataLakeGen2_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'LNK_DataLakeGen2'"
		},
		"Onpremsql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Onpremsql'"
		},
		"Outputsql_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Outputsql'"
		},
		"lnk_sqldatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lnk_sqldatabase'"
		},
		"lnk_storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'lnk_storage'"
		},
		"testcreditsafe_sftp_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'testcreditsafe_sftp'"
		},
		"LNK_DataLakeGen2_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://bajlecblob.dfs.core.windows.net"
		},
		"lnk_restapi_example_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://dummy.restapiexample.com/api/v1/employees"
		},
		"lnk_restapi_example_param_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{concat('http://dummy.restapiexample.com/api/v1/', linkedService().ln_fname)}"
		},
		"testcreditsafe_sftp_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "mft.filegateway.creditsafe.com"
		},
		"testcreditsafe_sftp_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "101159964_ext"
		},
		"test1_blob_event_properties_test1_zip_parameters_PipeFileName": {
			"type": "string",
			"defaultValue": "@first(split(triggerBody().fileName,'.'))"
		},
		"test1_blob_event_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/efa5efce-52f7-4c29-b118-ae4dff4cac2a/resourceGroups/bajlec-datafactory/providers/Microsoft.Storage/storageAccounts/bajlecblob"
		},
		"trgeventnew_properties_Trg Pipeline_parameters_FileName": {
			"type": "string",
			"defaultValue": "@triggerBody().FileName"
		},
		"trgeventnew_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/efa5efce-52f7-4c29-b118-ae4dff4cac2a/resourceGroups/bajlec-datafactory/providers/Microsoft.Storage/storageAccounts/bajlecblob"
		},
		"tr_tumbling_window_properties_pipeline_parameters_p_window_end_date": {
			"type": "string",
			"defaultValue": "@trigger().output.EndTime"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Big File To SQL Table')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "GroupCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GroupCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CorporateCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CorporateCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AccountNo",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AccountNo",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "AgreementNo",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "AgreementNo",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SubscriptionNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SubscriptionNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CostCentre",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CostCentre",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "NetworkSerialNumber",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NetworkSerialNumber",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Tariff",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Tariff",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Callclass",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CallClass",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CallclassDescription",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CallClassDescription",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CallLandingdate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CallLandingDate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Calldate",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Calldate",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Calltime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Calltime",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BundledCall",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BundledCall",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SPBilledCallPrice",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SPBilledCallPrice",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Service",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Service",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PreBundleActualDuration",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PreBundleActualDuration",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PreBundledSPValue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PreBundledSPValue",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SPRetailCallPrice",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SPRetailCallPrice",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DiscountValue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DiscountValue",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SCDCountryofCallOrigin",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SCDCountryOfCallOrigin",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SCDCallDirection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SCDCallDirection",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "SCDNetworksCallIndicator",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "SCDNetworksCallIndicator",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "GPRSDestination",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GPRSDestination",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "GPRSProductCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "GPRSProductCode",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "UplinkVolume",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "UplinkVolume",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DownlinkVolume",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DownlinkVolume",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "NumberofContexts",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "NumberOfContexts",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_InputCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_OutputSQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy03_bigfile"
				},
				"annotations": [],
				"lastPublishTime": "2020-10-06T20:39:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_InputCSV')]",
				"[concat(variables('factoryId'), '/datasets/DS_OutputSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Blob To SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Cars CSV to SQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Make",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Make",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Model",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Model",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Type",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "DriveTrain",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DriveTrain",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "Length",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Length",
											"type": "Decimal",
											"physicalType": "decimal"
										}
									},
									{
										"source": {
											"name": "Origin",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Origin",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CarsCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CarsTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-24T17:35:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CarsCSV')]",
				"[concat(variables('factoryId'), '/datasets/CarsTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Movies Clean')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MoviesCleanFlow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "MoviesCleanFlow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Movies": {},
									"MoviesClean": {},
									"MoviesByYearSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-20T08:29:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/MoviesCleanFlow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onprem To Blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Onprem_cars_table",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Demo_cars_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-20T08:29:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Onprem_cars_table')]",
				"[concat(variables('factoryId'), '/datasets/Demo_cars_csv')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_BlobToStaging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFilesToLoad",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "TruncateStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Blob",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFilesToLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFilesToLoad').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GetTableToLoad",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[staging].[usp_GetTableToLoad]",
											"storedProcedureParameters": {
												"SourceFileName": {
													"type": "String",
													"value": {
														"value": "@{item().name}",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Db_Static",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "LoadStaging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GetTableToLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@{item().name}",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Blob",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Db_Dynamic",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@{activity('GetTableToLoad').output.firstRow.StagingSchemaName}",
													"type": "Expression"
												},
												"TableName": {
													"value": "@{activity('GetTableToLoad').output.firstRow.StagingTableName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TruncateStaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[staging].[usp_TruncateStaging]"
						},
						"linkedServiceName": {
							"referenceName": "lnk_sqldatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "bidesign"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-22T14:36:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Blob')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]",
				"[concat(variables('factoryId'), '/datasets/DS_Db_Static')]",
				"[concat(variables('factoryId'), '/datasets/DS_Db_Dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_BlobToStagingToFinal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetFilesToLoad",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "TruncateStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Blob",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEachFile",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetFilesToLoad",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetFilesToLoad').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GetTableToLoad",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[staging].[usp_GetTableToLoad]",
											"storedProcedureParameters": {
												"SourceFileName": {
													"type": "String",
													"value": {
														"value": "@{item().name}",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_Db_Static",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "LoadStaging",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GetTableToLoad",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@{item().name}",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Blob",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Db_Dynamic",
											"type": "DatasetReference",
											"parameters": {
												"SchemaName": {
													"value": "@{activity('GetTableToLoad').output.firstRow.StagingSchemaName}",
													"type": "Expression"
												},
												"TableName": {
													"value": "@{activity('GetTableToLoad').output.firstRow.StagingTableName}",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "TruncateStaging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[staging].[usp_TruncateStaging]"
						},
						"linkedServiceName": {
							"referenceName": "lnk_sqldatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "StagingToFinal",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEachFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PIP_StagingToFinal",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "bidesign"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-23T08:54:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Blob')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]",
				"[concat(variables('factoryId'), '/pipelines/PIP_StagingToFinal')]",
				"[concat(variables('factoryId'), '/datasets/DS_Db_Static')]",
				"[concat(variables('factoryId'), '/datasets/DS_Db_Dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_DynamicQuery')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "HighWaterMark",
							"value": {
								"value": "SELECT * FROM source.CustomerRegistrations WHERE registration_date > '@{adddays(utcnow(), -180)}'",
								"type": "Expression"
							}
						}
					},
					{
						"name": "DebugRowsReturned",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('HighWaterMark')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Db_Static",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('HighWaterMark')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Db_Static",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Db_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "dbo",
									"TableName": "NewCustomerRegistrations"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"HighWaterMark": {
						"type": "String"
					}
				},
				"folder": {
					"name": "bidesign"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-23T11:58:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Db_Static')]",
				"[concat(variables('factoryId'), '/datasets/DS_Db_Dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_DynamicQueryLogging')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SetVariable",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "HighWaterMark",
							"value": {
								"value": "SELECT * FROM source.CustomerRegistrations WHERE registration_date > '@{adddays(utcnow(), -180)}'",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CopyData",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CreateEtlLogEntry",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@variables('HighWaterMark')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Db_Static",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Db_Dynamic",
								"type": "DatasetReference",
								"parameters": {
									"SchemaName": "dbo",
									"TableName": "NewCustomerRegistrations"
								}
							}
						]
					},
					{
						"name": "CreateEtlLogEntry",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SetVariable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[logging].[usp_InsertEtlLog]",
								"storedProcedureParameters": {
									"ComponentName": {
										"type": "String",
										"value": {
											"value": "CopyData",
											"type": "Expression"
										}
									},
									"Deletes": {
										"type": "Int32",
										"value": null
									},
									"DurationSeconds": {
										"type": "Int32",
										"value": null
									},
									"EndTime": {
										"type": "DateTime",
										"value": null
									},
									"ErrorMessage": {
										"type": "String",
										"value": null
									},
									"Inserts": {
										"type": "Int32",
										"value": null
									},
									"PipelineName": {
										"type": "String",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									},
									"StartTime": {
										"type": "DateTime",
										"value": {
											"value": "@utcnow()",
											"type": "Expression"
										}
									},
									"Updates": {
										"type": "Int32",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_Db_Static",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "UpdateEtlLogEntrySuccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[logging].[usp_UpdateEtlLog]",
							"storedProcedureParameters": {
								"Deletes": {
									"value": null,
									"type": "Int32"
								},
								"DurationSeconds": {
									"value": {
										"value": "@activity('CopyData').output.copyDuration",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"EndTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"ErrorMessage": {
									"value": null,
									"type": "String"
								},
								"EtlLogId": {
									"value": {
										"value": "@activity('CreateEtlLogEntry').output.firstRow.EtlLogId",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Inserts": {
									"value": {
										"value": "@activity('CopyData').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Updates": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_sqldatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateEtlLogEntryFailure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopyData",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[logging].[usp_UpdateEtlLog]",
							"storedProcedureParameters": {
								"Deletes": {
									"value": null,
									"type": "Int32"
								},
								"DurationSeconds": {
									"value": {
										"value": "@activity('CopyData').output.copyDuration",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"EndTime": {
									"value": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"ErrorMessage": {
									"value": {
										"value": "@{activity('CopyData').output.errors[0].Message}",
										"type": "Expression"
									},
									"type": "String"
								},
								"EtlLogId": {
									"value": {
										"value": "@activity('CreateEtlLogEntry').output.firstRow.EtlLogId",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Inserts": {
									"value": {
										"value": "@activity('CopyData').output.rowsCopied",
										"type": "Expression"
									},
									"type": "Int32"
								},
								"Updates": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_sqldatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"HighWaterMark": {
						"type": "String"
					}
				},
				"folder": {
					"name": "bidesign"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-23T15:05:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Db_Static')]",
				"[concat(variables('factoryId'), '/datasets/DS_Db_Dynamic')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_LoadFactSales2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_LoadFactSales2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_LoadFactSales2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingFact": {},
									"DimCustomer": {},
									"DimProduct": {},
									"LoadFactSales2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "bidesign"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-25T10:38:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_LoadFactSales2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PIP_StagingToFinal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LoadDimCustomer",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[staging].[usp_LoadDimCustomer]"
						},
						"linkedServiceName": {
							"referenceName": "lnk_sqldatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadDimProduct",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[staging].[usp_LoadDimProduct]"
						},
						"linkedServiceName": {
							"referenceName": "lnk_sqldatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadFactSales",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadDimCustomer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LoadDimProduct",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[staging].[usp_LoadFactSales]"
						},
						"linkedServiceName": {
							"referenceName": "lnk_sqldatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "bidesign"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-23T08:48:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Param Blob To SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy CSV to TBL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "truncate table @{pipeline().parameters.TableName}",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ParamInputCSV",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@concat(pipeline().parameters.FileName, '.csv')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParamOutputTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Copy TBL to CSV",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ParamOutputTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "ParamInputCSV",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@concat(pipeline().parameters.FileName,'-', utcnow(), '.csv')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Copy TBL to CSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "Temp",
							"value": "123"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"variables": {
					"Temp": {
						"type": "String"
					}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-20T08:29:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ParamInputCSV')]",
				"[concat(variables('factoryId'), '/datasets/ParamOutputTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Trg Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TrgInputCSV",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "TrgOutputCSV",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@pipeline().parameters.FileName",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-20T08:29:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TrgInputCSV')]",
				"[concat(variables('factoryId'), '/datasets/TrgOutputCSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cars_view')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Make",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Make",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Model",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Model",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Type",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Type",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Origin",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "Origin",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "DriveTrain",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "DriveTrain",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Length",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										},
										"sink": {
											"name": "Length",
											"type": "Decimal",
											"physicalType": "Decimal"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_cars_view",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_cars_view_file",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-29T18:00:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_cars_view')]",
				"[concat(variables('factoryId'), '/datasets/DS_cars_view_file')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_BulkLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "List Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from ExportedTables;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_TableList",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List Tables').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Export Table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_SQLTable",
											"type": "DatasetReference",
											"parameters": {
												"pds_TableName": {
													"value": "@item().table_name",
													"type": "Expression"
												},
												"pds_SchemaName": {
													"value": "@item().table_schema",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_ExportedData",
											"type": "DatasetReference",
											"parameters": {
												"pds_FileName": {
													"value": "@concat(item().table_schema, '_', item().table_name, '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-20T08:29:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_TableList')]",
				"[concat(variables('factoryId'), '/datasets/ds_SQLTable')]",
				"[concat(variables('factoryId'), '/datasets/ds_ExportedData')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Cars",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "cars.csv"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_EmailGeneric",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_EmailOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Planes",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Cars",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "planes.csv"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_EmailGeneric",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_EmailOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy Movies",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy Planes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "movies.csv"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_EmailGeneric",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_EmailOutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-20T08:29:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_EmailGeneric')]",
				"[concat(variables('factoryId'), '/datasets/ds_EmailOutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_FactScoreDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_LoadFactScore",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadFactScore",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StagingScore": {},
									"DimTeam": {},
									"FactScore": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-20T13:27:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_LoadFactScore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_FactScorePipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select a.TeamKey, b.* from zmy01_stg_score b\njoin zmy01_dim_team a\non a.TeamCode = b.TeamCode\nand b.LastUpdateDate >= a.DWEffectiveStartDate\nand b.LastUpdateDate < a.DWEffectiveEndDate",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_stgScore",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_factScore",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-20T12:13:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stgScore')]",
				"[concat(variables('factoryId'), '/datasets/ds_factScore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_IncrementalLoad')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "CFG table:\n\n-- TableName: table name to be loaded\n-- NaturalKey: for dim tables to de-duplicate records with same natural key and only leave latest record; for all other tables leave \"na\" (not any)  \n-- Source: could be region, lob, application, crm, erp, ... (entered through pipeline parameter)\n-- MaxLastUpdateDate: table last updated date \n-- Enabled: 1 - load, 0 - do not load\n-- LoadType: 1 - incremental, 0 - full",
				"activities": [
					{
						"name": "Enabled",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from zmy01_stg_cfg where Enabled = 1",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_stg",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dummy"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter source",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Enabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Enabled').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().source, pipeline().parameters.Source)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Source iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter source",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter source').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Inc - Full condition",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(equals(item().LoadType, 1))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Full",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().TableName}",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"preCopyScript": {
															"value": "truncate table @{replace(item().TableName, 'src', 'stg')}",
															"type": "Expression"
														},
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_src",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_stg",
														"type": "DatasetReference",
														"parameters": {
															"TableName": {
																"value": "@replace(item().TableName, 'src', 'stg')",
																"type": "Expression"
															}
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "Get max last update date from CFG",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "select MaxLastUpdateDate from zmy01_stg_cfg where TableName like '@{item().TableName}'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "ds_stg",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "dummy"
														}
													}
												}
											},
											{
												"name": "Incremental",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "Get max last update date from CFG",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "select * from @{item().TableName} \nwhere \nconvert(varchar(max), LastUpdateDate, 120) > \nconvert(varchar(max), substring(replace('@{activity('Get max last update date from CFG').output.firstRow.MaxLastUpdateDate}', 'T', ' '), 0, 20), 120)\n",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "ds_src",
														"type": "DatasetReference",
														"parameters": {}
													}
												],
												"outputs": [
													{
														"referenceName": "ds_stg",
														"type": "DatasetReference",
														"parameters": {
															"TableName": {
																"value": "@replace(item().TableName, 'src', 'stg')",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								},
								{
									"name": "Get max last update date from STG",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Dedup dim",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select max(LastUpdateDate) as maxD from @{replace(item().TableName, 'src', 'stg')}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_stg",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "dummy"
											}
										}
									}
								},
								{
									"name": "Update max last update date in CFG",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get max last update date from STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "update zmy01_stg_cfg \nset MaxLastUpdateDate = '@{activity('Get max last update date from STG').output.firstRow.maxD}'\nwhere TableName like '@{item().TableName}'\n\nselect '1'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "ds_stg",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "dummy"
											}
										}
									}
								},
								{
									"name": "Dedup dim",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Inc - Full condition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(equals(item().NaturalKey, 'na'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Delete dup records",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": {
															"value": "delete dup\nfrom\n(\n select row_number() over (partition by @{item().NaturalKey} order by LastUpdateDate desc) as val\n from @{replace(item().TableName, 'src', 'stg')}\n) dup\nwhere dup.val > 1\n\nselect '1'",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "ds_stg",
														"type": "DatasetReference",
														"parameters": {
															"TableName": "dummy"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Source": {
						"type": "string",
						"defaultValue": "UK"
					}
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-17T10:38:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stg')]",
				"[concat(variables('factoryId'), '/datasets/ds_src')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pip_Email",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Send Email Success",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-28.uksouth.logic.azure.com:443/workflows/5a5278aa59d741cd9ab8b9b88f395947/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=uioEqaKZO7rgtq6ZDHYglW6e8PD9WhB6D4ZdQNg3XRM",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"title\": \"PIPELINE FINISHED\",\n    \"message\": \"DEMO PIPELINE RUNNING SUCCESSFULLY\",\n    \"color\": \"Green\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Send Email Failure",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-28.uksouth.logic.azure.com:443/workflows/5a5278aa59d741cd9ab8b9b88f395947/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=uioEqaKZO7rgtq6ZDHYglW6e8PD9WhB6D4ZdQNg3XRM",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n    \"title\": \"PIPELINE FAILED\",\n    \"message\": \"@{activity('Execute Pipeline1').error.message}\",\n    \"color\": \"Red\",\n    \"dataFactoryName\": \"@{pipeline().DataFactory}\",\n    \"pipelineName\": \"@{pipeline().Pipeline}\",\n    \"pipelineRunId\": \"@{pipeline().RunId}\",\n    \"time\": \"@{utcnow()}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-20T08:29:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pip_Email')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_SCD1Team')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_LoadDimTeamType1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimTeamType1_V2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageTable": {},
									"DimTable": {},
									"MaxTeamKey": {},
									"InsertSink": {},
									"UpdateSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-25T07:25:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_LoadDimTeamType1_V2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_SCD2Team')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_LoadDimTeamType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimTeamType2_V2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageTable": {},
									"DimTable": {},
									"MaxTeamKey": {},
									"InsertSink": {},
									"UpdateSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-25T16:17:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_LoadDimTeamType2_V2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_SCD2Team_CloseDup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_LoadDimTeamType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimTeamType2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageTable": {},
									"DimTable": {},
									"MaxTeamKey": {},
									"InsertSink": {},
									"UpdateSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CloseDup",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_LoadDimTeamType2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[zmy01_CloseDedup]"
						},
						"linkedServiceName": {
							"referenceName": "lnk_sqldatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-25T13:13:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_LoadDimTeamType2')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_SCD2Team_CloseDup_V2_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_LoadDimTeamType2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LoadDimTeamType2_V2_1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"StageTable": {},
									"DimTable": {},
									"MaxTeamKey": {},
									"InsertSink": {},
									"UpdateSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CloseDup2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "df_LoadDimTeamType2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[zmy01_CloseDedup2]"
						},
						"linkedServiceName": {
							"referenceName": "lnk_sqldatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-26T08:07:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_LoadDimTeamType2_V2_1')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_excel_01')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_Excel",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_Excel_output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-20T08:29:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_Excel')]",
				"[concat(variables('factoryId'), '/datasets/ds_Excel_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sftp to blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "SftpReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "ds_sftp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_blob1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "testcreditsafe"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_sftp')]",
				"[concat(variables('factoryId'), '/datasets/ds_blob1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test1_1_zip')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "test1_1_ZipToUnzip",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "test1_1_SourceDataset",
								"type": "DatasetReference",
								"parameters": {
									"SourceFileName": {
										"value": "@concat(pipeline().parameters.PipeFileName, '.zip')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "test1_1_DestinationDataset",
								"type": "DatasetReference",
								"parameters": {
									"DestinationFileName": {
										"value": "@concat(pipeline().parameters.PipeFileName, '.txt')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PipeFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"lastPublishTime": "2020-10-02T06:26:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/test1_1_SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/test1_1_DestinationDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test1_zip')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "test1_ZipToUnzip",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "zmy02-zipped//demo1.zip"
							},
							{
								"name": "Destination",
								"value": "zmy02-unzipped//"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 0,
									"compressionProperties": {
										"type": "ZipDeflateReadSettings",
										"preserveZipFileNameAsFolder": false
									}
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "test1_SourceDataset",
								"type": "DatasetReference",
								"parameters": {
									"SourceFileName": {
										"value": "@concat(pipeline().parameters.PipeFileName, '.zip')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "test1_DestinationDataset",
								"type": "DatasetReference",
								"parameters": {
									"DestinationFileName": {
										"value": "@concat(pipeline().parameters.PipeFileName, '.txt')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "test1_LoadFinalTable",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "test1_ZipToUnzip",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "PIPELINERUNID",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ICAO",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Icao",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "IATA",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Iata",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MAKER",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Maker",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DESCRIPTION",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Descr",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PIPELINERUNID",
											"type": "String"
										},
										"sink": {
											"name": "PipelineRunId",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "test1_DestinationDataset",
								"type": "DatasetReference",
								"parameters": {
									"DestinationFileName": {
										"value": "@concat(pipeline().parameters.PipeFileName, '.txt')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "test1_FinalTableDataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "test1_LoadLogTable",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "test1_ZipToUnzip",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[cdr].[usp_LoadLogTable]",
							"storedProcedureParameters": {
								"PipelineRunId": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"PipelineTriggerTime": {
									"value": {
										"value": "@pipeline().TriggerTime",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"SourceFileName": {
									"value": {
										"value": "@pipeline().parameters.PipeFileName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_sqldatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"PipeFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"lastPublishTime": "2020-10-02T11:22:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/test1_SourceDataset')]",
				"[concat(variables('factoryId'), '/datasets/test1_DestinationDataset')]",
				"[concat(variables('factoryId'), '/datasets/test1_FinalTableDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_restapi')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from REST API to BLOB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "test_restapi_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "test_restapi_blob_json",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Lookup JSON",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data from REST API to BLOB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "test_restapi_blob_json",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy data JSON to SQLDB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data from REST API to BLOB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['employee_name']"
										},
										"sink": {
											"name": "employee_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['employee_salary']"
										},
										"sink": {
											"name": "employee_salary",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['employee_age']"
										},
										"sink": {
											"name": "employee_age",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['profile_image']"
										},
										"sink": {
											"name": "profile_image",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['data']"
							}
						},
						"inputs": [
							{
								"referenceName": "test_restapi_blob_json",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "test_restapi_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"lastPublishTime": "2020-10-02T15:53:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/test_restapi_source')]",
				"[concat(variables('factoryId'), '/datasets/test_restapi_blob_json')]",
				"[concat(variables('factoryId'), '/datasets/test_restapi_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_restapi2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RESTAPI to SQLDB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['id']"
										},
										"sink": {
											"name": "id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['employee_name']"
										},
										"sink": {
											"name": "employee_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "[['employee_salary']"
										},
										"sink": {
											"name": "employee_salary",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['employee_age']"
										},
										"sink": {
											"name": "employee_age",
											"type": "Int32"
										}
									},
									{
										"source": {
											"path": "[['profile_image']"
										},
										"sink": {
											"name": "profile_image",
											"type": "String"
										}
									}
								],
								"collectionReference": "$['data']"
							}
						},
						"inputs": [
							{
								"referenceName": "test_restapi_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "test_restapi_sqldb",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"lastPublishTime": "2020-10-02T15:57:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/test_restapi_source')]",
				"[concat(variables('factoryId'), '/datasets/test_restapi_sqldb')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_restapi_param')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from REST API to BLOB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "test_restapi_source_param",
								"type": "DatasetReference",
								"parameters": {
									"dssrc_fname": {
										"value": "@pipeline().parameters.pl_fname",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "test_restapi_blob_json_param",
								"type": "DatasetReference",
								"parameters": {
									"ds_fname": {
										"value": "@pipeline().parameters.pl_fname",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Lookup JSON",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data from REST API to BLOB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "test_restapi_blob_json_param",
								"type": "DatasetReference",
								"parameters": {
									"ds_fname": {
										"value": "@pipeline().parameters.pl_fname",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"pl_fname": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"lastPublishTime": "2020-10-06T06:35:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/test_restapi_source_param')]",
				"[concat(variables('factoryId'), '/datasets/test_restapi_blob_json_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_tbl_to_blob')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CarsTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_DataLakeGen2_Cars",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-30T10:01:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CarsTable')]",
				"[concat(variables('factoryId'), '/datasets/DS_DataLakeGen2_Cars')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CarsCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Inputblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "cars.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Make",
						"type": "String"
					},
					{
						"name": "Model",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Origin",
						"type": "String"
					},
					{
						"name": "DriveTrain",
						"type": "String"
					},
					{
						"name": "Length",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Inputblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CarsTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Outputsql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Make",
						"type": "nvarchar"
					},
					{
						"name": "Model",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Origin",
						"type": "nvarchar"
					},
					{
						"name": "DriveTrain",
						"type": "nvarchar"
					},
					{
						"name": "Length",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Cars"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Outputsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Blob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "bidesign"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "bidesign"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_DataLakeGen2_Cars')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LNK_DataLakeGen2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "test-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LNK_DataLakeGen2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Db_Dynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SchemaName": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "bidesign"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Db_FactSales2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "bidesign"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SalesKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TransactionId",
						"type": "varchar"
					},
					{
						"name": "ProductKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CustomerKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "InsertTime",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "InsertUser",
						"type": "nvarchar"
					},
					{
						"name": "LastUpdateTime",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "LastUpdateUser",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactSales2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Db_Static')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "bidesign"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_InputCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy03_bigfile"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "filesbig.csv",
						"container": "zmy03-bigfile"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "GroupCode",
						"type": "String"
					},
					{
						"name": "CorporateCode",
						"type": "String"
					},
					{
						"name": "AccountNo",
						"type": "String"
					},
					{
						"name": "AgreementNo",
						"type": "String"
					},
					{
						"name": "SubscriptionNumber",
						"type": "String"
					},
					{
						"name": "CostCentre",
						"type": "String"
					},
					{
						"name": "NetworkSerialNumber",
						"type": "String"
					},
					{
						"name": "Tariff",
						"type": "String"
					},
					{
						"name": "Callclass",
						"type": "String"
					},
					{
						"name": "CallclassDescription",
						"type": "String"
					},
					{
						"name": "CallLandingdate",
						"type": "String"
					},
					{
						"name": "Calldate",
						"type": "String"
					},
					{
						"name": "Calltime",
						"type": "String"
					},
					{
						"name": "BundledCall",
						"type": "String"
					},
					{
						"name": "SPBilledCallPrice",
						"type": "String"
					},
					{
						"name": "Service",
						"type": "String"
					},
					{
						"name": "PreBundleActualDuration",
						"type": "String"
					},
					{
						"name": "PreBundledSPValue",
						"type": "String"
					},
					{
						"name": "SPRetailCallPrice",
						"type": "String"
					},
					{
						"name": "DiscountValue",
						"type": "String"
					},
					{
						"name": "SCDCountryofCallOrigin",
						"type": "String"
					},
					{
						"name": "SCDCallDirection",
						"type": "String"
					},
					{
						"name": "SCDNetworksCallIndicator",
						"type": "String"
					},
					{
						"name": "GPRSDestination",
						"type": "String"
					},
					{
						"name": "GPRSProductCode",
						"type": "String"
					},
					{
						"name": "UplinkVolume",
						"type": "String"
					},
					{
						"name": "DownlinkVolume",
						"type": "String"
					},
					{
						"name": "NumberofContexts",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OutputSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy03_bigfile"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "GroupCode",
						"type": "varchar"
					},
					{
						"name": "CorporateCode",
						"type": "varchar"
					},
					{
						"name": "AccountNo",
						"type": "varchar"
					},
					{
						"name": "AgreementNo",
						"type": "varchar"
					},
					{
						"name": "SubscriptionNumber",
						"type": "varchar"
					},
					{
						"name": "CostCentre",
						"type": "varchar"
					},
					{
						"name": "NetworkSerialNumber",
						"type": "varchar"
					},
					{
						"name": "Tariff",
						"type": "varchar"
					},
					{
						"name": "CallClass",
						"type": "varchar"
					},
					{
						"name": "CallClassDescription",
						"type": "varchar"
					},
					{
						"name": "CallLandingDate",
						"type": "varchar"
					},
					{
						"name": "Calldate",
						"type": "varchar"
					},
					{
						"name": "Calltime",
						"type": "varchar"
					},
					{
						"name": "BundledCall",
						"type": "varchar"
					},
					{
						"name": "SPBilledCallPrice",
						"type": "varchar"
					},
					{
						"name": "Service",
						"type": "varchar"
					},
					{
						"name": "PreBundleActualDuration",
						"type": "varchar"
					},
					{
						"name": "PreBundledSPValue",
						"type": "varchar"
					},
					{
						"name": "SPRetailCallPrice",
						"type": "varchar"
					},
					{
						"name": "DiscountValue",
						"type": "varchar"
					},
					{
						"name": "SCDCountryOfCallOrigin",
						"type": "varchar"
					},
					{
						"name": "SCDCallDirection",
						"type": "varchar"
					},
					{
						"name": "SCDNetworksCallIndicator",
						"type": "varchar"
					},
					{
						"name": "GPRSDestination",
						"type": "varchar"
					},
					{
						"name": "GPRSProductCode",
						"type": "varchar"
					},
					{
						"name": "UplinkVolume",
						"type": "varchar"
					},
					{
						"name": "DownlinkVolume",
						"type": "varchar"
					},
					{
						"name": "NumberOfContexts",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "zmy03_bigfile"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_cars_view')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Make",
						"type": "nvarchar"
					},
					{
						"name": "Model",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Origin",
						"type": "nvarchar"
					},
					{
						"name": "DriveTrain",
						"type": "nvarchar"
					},
					{
						"name": "Length",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "cars_view"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_cars_view_file')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "cars_view_file.csv",
						"container": "dfoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_test_tbl_to_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "test-output"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Demo_cars_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Inputblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "demo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Inputblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onprem_cars_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Onpremsql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "Model",
						"type": "varchar"
					},
					{
						"name": "Length",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Cars"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Onpremsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParamInputCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Inputblob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Make",
						"type": "String"
					},
					{
						"name": "Model",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Origin",
						"type": "String"
					},
					{
						"name": "DriveTrain",
						"type": "String"
					},
					{
						"name": "Length",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Inputblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ParamOutputTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Outputsql",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Make",
						"type": "nvarchar"
					},
					{
						"name": "Model",
						"type": "nvarchar"
					},
					{
						"name": "Type",
						"type": "nvarchar"
					},
					{
						"name": "Origin",
						"type": "nvarchar"
					},
					{
						"name": "DriveTrain",
						"type": "nvarchar"
					},
					{
						"name": "Length",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Outputsql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrgInputCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Inputblob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "trginput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Inputblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TrgOutputCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Inputblob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "trgoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Inputblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMoviesCSV_input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Inputblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movies.csv",
						"container": "dfinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Inputblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfMoviesCSV_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Inputblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dfoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Inputblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_EmailGeneric')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "email-input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_EmailOutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "email-output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Cars",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "data.xlsx",
						"container": "demo-excel"
					},
					"range": "",
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Excel_output')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "adf_output.csv",
						"container": "demo-excel"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ExportedData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pds_FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().pds_FileName",
							"type": "Expression"
						},
						"container": "exported-data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_SQLTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pds_TableName": {
						"type": "string"
					},
					"pds_SchemaName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().pds_SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().pds_TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TableList')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_blob1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Inputblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "testcreditsafe"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "testcreditsafe"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Inputblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dimTeam')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "zmy01_dim_team"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_factScore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TeamKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TeamCode",
						"type": "nvarchar"
					},
					{
						"name": "Score",
						"type": "int",
						"precision": 10
					},
					{
						"name": "LastUpdateDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "zmy01_fact_score"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputCars1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "cars1.csv",
						"container": "dfwinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Make",
						"type": "String"
					},
					{
						"name": "Model",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "DriveTrain",
						"type": "String"
					},
					{
						"name": "Length",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_inputCars2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "cars2.csv",
						"container": "dfwinput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Make",
						"type": "String"
					},
					{
						"name": "Origin",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_outputCars')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy00_Misc"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "dfwoutput"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_sftp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "testcreditsafe_sftp",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "testcreditsafe"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "SftpLocation",
						"fileName": "LUCS01_R_20210205.rar",
						"folderPath": "/UKLTD_R_20210205"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/testcreditsafe_sftp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_stgScore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "zmy01_stg_score"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_stgTeam')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "zmy01_stg_team"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test1_1_DestinationDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DestinationFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().DestinationFileName",
							"type": "Expression"
						},
						"container": "zmy02-unzipped"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test1_1_SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().SourceFileName",
							"type": "Expression"
						},
						"container": "zmy02-zipped"
					},
					"compression": {
						"type": "ZipDeflate"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test1_DestinationDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"DestinationFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().DestinationFileName",
							"type": "Expression"
						},
						"container": "zmy02-unzipped"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\r",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test1_FinalTableDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Icao",
						"type": "varchar"
					},
					{
						"name": "Iata",
						"type": "varchar"
					},
					{
						"name": "Maker",
						"type": "varchar"
					},
					{
						"name": "Descr",
						"type": "varchar"
					},
					{
						"name": "Fname",
						"type": "varchar"
					},
					{
						"name": "LastUpdateTime",
						"type": "datetime2",
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "cdr",
					"table": "Planes"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test1_LogTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Fname",
						"type": "varchar"
					},
					{
						"name": "LastUpdateTime",
						"type": "datetime2",
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "cdr",
					"table": "LogTable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test1_SourceDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SourceFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().SourceFileName",
							"type": "Expression"
						},
						"container": "zmy02-zipped"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\r",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_restapi_blob_json')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "restapiexample.json",
						"container": "zmy02-restapi"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_restapi_blob_json_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_storage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_fname": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(dataset().ds_fname, '.json')",
							"type": "Expression"
						},
						"container": "zmy02-restapi"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_restapi_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_restapi_example",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_restapi_example')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_restapi_source_param')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_restapi_example_param",
					"type": "LinkedServiceReference",
					"parameters": {
						"ln_fname": {
							"value": "@dataset().dssrc_fname",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"dssrc_fname": {
						"type": "string"
					}
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_restapi_example_param')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test_restapi_sqldb')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_sqldatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "zmy02_CDR"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "employee_name",
						"type": "varchar"
					},
					{
						"name": "employee_salary",
						"type": "int",
						"precision": 10
					},
					{
						"name": "employee_age",
						"type": "int",
						"precision": 10
					},
					{
						"name": "profile_image",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "cdr",
					"table": "RestApiExample"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_sqldatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Inputblob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Inputblob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LNK_DataLakeGen2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('LNK_DataLakeGen2_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('LNK_DataLakeGen2_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Onpremsql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('Onpremsql_connectionString')]"
				},
				"connectVia": {
					"referenceName": "onprem",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/onprem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Outputsql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('Outputsql_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_restapi_example')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('lnk_restapi_example_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_restapi_example_param')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"ln_fname": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('lnk_restapi_example_param_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_sqldatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('lnk_sqldatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('lnk_storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/testcreditsafe_sftp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Sftp",
				"typeProperties": {
					"host": "[parameters('testcreditsafe_sftp_properties_typeProperties_host')]",
					"port": 22,
					"skipHostKeyValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('testcreditsafe_sftp_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('testcreditsafe_sftp_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/test1_blob_event')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "test1_zip",
							"type": "PipelineReference"
						},
						"parameters": {
							"PipeFileName": "[parameters('test1_blob_event_properties_test1_zip_parameters_PipeFileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/zmy02-zipped/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('test1_blob_event_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/test1_zip')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trgeventnew')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Trg Pipeline",
							"type": "PipelineReference"
						},
						"parameters": {
							"FileName": "[parameters('trgeventnew_properties_Trg Pipeline_parameters_FileName')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/trginput/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trgeventnew_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Trg Pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onprem')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_LoadFactSales2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "bidesign"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Db_Static",
								"type": "DatasetReference"
							},
							"name": "StagingFact"
						},
						{
							"dataset": {
								"referenceName": "DS_Db_Static",
								"type": "DatasetReference"
							},
							"name": "DimCustomer"
						},
						{
							"dataset": {
								"referenceName": "DS_Db_Static",
								"type": "DatasetReference"
							},
							"name": "DimProduct"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Db_FactSales2",
								"type": "DatasetReference"
							},
							"name": "LoadFactSales2"
						}
					],
					"transformations": [
						{
							"name": "GetCustomerKey"
						},
						{
							"name": "GetProductKey"
						},
						{
							"name": "DerivedColumn"
						}
					],
					"script": "source(output(\n\t\ttransaction_id as string,\n\t\tproduct_id as string,\n\t\tcustomer_id as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT * FROM [staging].[Sales]',\n\tformat: 'query') ~> StagingFact\nsource(output(\n\t\tCustomerKey as integer,\n\t\tCustomerId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select CustomerKey, CustomerId from [dbo].[DimCustomer]',\n\tformat: 'query') ~> DimCustomer\nsource(output(\n\t\tProductKey as integer,\n\t\tProductId as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'select ProductKey, ProductId from [dbo].[DimProduct]',\n\tformat: 'query') ~> DimProduct\nStagingFact, DimCustomer join(customer_id == CustomerId,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> GetCustomerKey\nGetCustomerKey, DimProduct join(product_id == ProductId,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> GetProductKey\nGetProductKey derive(NewCustomerKey = iifNull(CustomerKey, -1, CustomerKey),\n\t\tNewProductKey = iifNull(ProductKey, -1, ProductKey)) ~> DerivedColumn\nDerivedColumn sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tSalesKey as integer,\n\t\tTransactionId as string,\n\t\tProductKey as integer,\n\t\tCustomerKey as integer,\n\t\tInsertTime as timestamp,\n\t\tInsertUser as string,\n\t\tLastUpdateTime as timestamp,\n\t\tLastUpdateUser as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTransactionId = transaction_id,\n\t\tProductKey = NewProductKey,\n\t\tCustomerKey = NewCustomerKey\n\t)) ~> LoadFactSales2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Db_Static')]",
				"[concat(variables('factoryId'), '/datasets/DS_Db_FactSales2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesCleanFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "zmy00_Misc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "dfMoviesCSV_input",
								"type": "DatasetReference"
							},
							"name": "Movies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "dfMoviesCSV_output",
								"type": "DatasetReference"
							},
							"name": "MoviesClean"
						},
						{
							"dataset": {
								"referenceName": "dfMoviesCSV_output",
								"type": "DatasetReference"
							},
							"name": "MoviesByYearSink"
						}
					],
					"transformations": [
						{
							"name": "YearExtraction"
						},
						{
							"name": "MoviesByYear"
						}
					],
					"script": "source(output(\n\t\tmovieId as string,\n\t\ttitle as string,\n\t\tgenres as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Movies\nMovies derive(Year = toInteger(trim(right(title, 6), '()')),\n\t\ttitle = toString(left(title, length(title)-6)),\n\tpartitionBy('hash', 1)) ~> YearExtraction\nYearExtraction aggregate(groupBy(Year),\n\tMoviesCount = count(),\n\tpartitionBy('hash', 1)) ~> MoviesByYear\nYearExtraction sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['movies-clean.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tmovieId,\n\t\ttitle,\n\t\tgenres,\n\t\tYear\n\t),\n\tpartitionBy('hash', 1)) ~> MoviesClean\nMoviesByYear sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['movies-by-year.csv'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> MoviesByYearSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dfMoviesCSV_input')]",
				"[concat(variables('factoryId'), '/datasets/dfMoviesCSV_output')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoadDimTeamType1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_stgTeam",
								"type": "DatasetReference"
							},
							"name": "StageTable"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "DimTable"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "MaxTeamKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "InsertSink"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "UpdateSink"
						}
					],
					"transformations": [
						{
							"name": "DimTableRenameCols"
						},
						{
							"name": "StageHash"
						},
						{
							"name": "Exists"
						},
						{
							"name": "Lookup"
						},
						{
							"name": "ConditionalSplit"
						},
						{
							"name": "JoinMax"
						},
						{
							"name": "SurrogateKey"
						},
						{
							"name": "InsertDerivedColumn"
						},
						{
							"name": "AlterRowInsert"
						},
						{
							"name": "UpdateDerivedColumn"
						},
						{
							"name": "AlterRowUpdate"
						}
					],
					"script": "source(output(\n\t\tTeamCode as string,\n\t\tLocation as string,\n\t\tNickName as string,\n\t\tConferenceCode as string,\n\t\tDivisionName as string,\n\t\tLastUpdateDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StageTable\nsource(output(\n\t\tTeamKey as integer,\n\t\tTeamCode as string,\n\t\tRecordHash as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT TeamKey, TeamCode, RecordHash\\nFROM zmy01_dim_team',\n\tformat: 'query') ~> DimTable\nsource(output(\n\t\tMaxTeamKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT MaxTeamKey = ISNULL(MAX(TeamKey), 0)\\nFROM zmy01_dim_team',\n\tformat: 'query') ~> MaxTeamKey\nDimTable select(mapColumn(\n\t\tDimTeamKey = TeamKey,\n\t\tDimTeamCode = TeamCode,\n\t\tDimRecordHash = RecordHash\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimTableRenameCols\nStageTable derive(StageRecordHash = sha2(256, TeamCode, Location, NickName, ConferenceCode, DivisionName)) ~> StageHash\nStageHash, DimTableRenameCols exists(StageRecordHash == DimRecordHash,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists\nExists, DimTableRenameCols lookup(TeamCode == DimTeamCode,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup\nLookup split(isNull(DimTeamKey),\n\tdisjoint: false) ~> ConditionalSplit@(NewItem, UpdatedItem)\nConditionalSplit@NewItem, MaxTeamKey join(1==1,\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMax\nJoinMax keyGenerate(output(NewTeamKey as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SurrogateKey\nSurrogateKey derive(NewTeamKey = NewTeamKey + MaxTeamKey,\n\t\tDWIsCurrent = 1,\n\t\tDWEffectiveEndDate = toDate('2100-01-01'),\n\t\tRecordCreateDate = currentUTC(),\n\t\tRecordUpdateDate = currentUTC()) ~> InsertDerivedColumn\nInsertDerivedColumn alterRow(insertIf(1==1)) ~> AlterRowInsert\nConditionalSplit@UpdatedItem derive(RecordUpdateDate = currentUTC()) ~> UpdateDerivedColumn\nUpdateDerivedColumn alterRow(updateIf(1==1)) ~> AlterRowUpdate\nAlterRowInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTeamCode,\n\t\tLocation,\n\t\tNickName,\n\t\tConferenceCode,\n\t\tDivisionName,\n\t\tRecordHash = StageRecordHash,\n\t\tTeamKey = NewTeamKey,\n\t\tDWIsCurrent,\n\t\tDWEffectiveStartDate = LastUpdateDate,\n\t\tDWEffectiveEndDate,\n\t\tRecordCreateDate,\n\t\tRecordUpdateDate\n\t)) ~> InsertSink\nAlterRowUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TeamKey'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTeamCode,\n\t\tLocation,\n\t\tNickName,\n\t\tConferenceCode,\n\t\tDivisionName,\n\t\tRecordHash = StageRecordHash,\n\t\tTeamKey = DimTeamKey,\n\t\tRecordUpdateDate,\n\t\tDWEffectiveStartDate = LastUpdateDate\n\t)) ~> UpdateSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stgTeam')]",
				"[concat(variables('factoryId'), '/datasets/ds_dimTeam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoadDimTeamType1_V2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "SCD Dim Type 1 - V2: source StageTable first removes duplicate business keys and just takes the last record",
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_stgTeam",
								"type": "DatasetReference"
							},
							"name": "StageTable"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "DimTable"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "MaxTeamKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "InsertSink"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "UpdateSink"
						}
					],
					"transformations": [
						{
							"name": "DimTableRenameCols"
						},
						{
							"name": "StageHash"
						},
						{
							"name": "Exists"
						},
						{
							"name": "Lookup"
						},
						{
							"name": "ConditionalSplit"
						},
						{
							"name": "JoinMax"
						},
						{
							"name": "SurrogateKey"
						},
						{
							"name": "InsertDerivedColumn"
						},
						{
							"name": "AlterRowInsert"
						},
						{
							"name": "UpdateDerivedColumn"
						},
						{
							"name": "AlterRowUpdate"
						}
					],
					"script": "source(output(\n\t\tTeamCode as string,\n\t\tLocation as string,\n\t\tNickName as string,\n\t\tConferenceCode as string,\n\t\tDivisionName as string,\n\t\tLastUpdateDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT dup.* \\nFROM\\n(\\n   SELECT ROW_NUMBER() OVER (PARTITION BY TeamCode ORDER BY LastUpdateDate desc) AS val\\n , stg.*\\n FROM zmy01_stg_team stg\\n) dup\\nWHERE dup.val = 1',\n\tformat: 'query') ~> StageTable\nsource(output(\n\t\tTeamKey as integer,\n\t\tTeamCode as string,\n\t\tRecordHash as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT TeamKey, TeamCode, RecordHash\\nFROM zmy01_dim_team',\n\tformat: 'query') ~> DimTable\nsource(output(\n\t\tMaxTeamKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT MaxTeamKey = ISNULL(MAX(TeamKey), 0)\\nFROM zmy01_dim_team',\n\tformat: 'query') ~> MaxTeamKey\nDimTable select(mapColumn(\n\t\tDimTeamKey = TeamKey,\n\t\tDimTeamCode = TeamCode,\n\t\tDimRecordHash = RecordHash\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimTableRenameCols\nStageTable derive(StageRecordHash = sha2(256, TeamCode, Location, NickName, ConferenceCode, DivisionName)) ~> StageHash\nStageHash, DimTableRenameCols exists(StageRecordHash == DimRecordHash,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists\nExists, DimTableRenameCols lookup(TeamCode == DimTeamCode,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup\nLookup split(isNull(DimTeamKey),\n\tdisjoint: false) ~> ConditionalSplit@(NewItem, UpdatedItem)\nConditionalSplit@NewItem, MaxTeamKey join(1==1,\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMax\nJoinMax keyGenerate(output(NewTeamKey as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SurrogateKey\nSurrogateKey derive(NewTeamKey = NewTeamKey + MaxTeamKey,\n\t\tDWIsCurrent = 1,\n\t\tDWEffectiveEndDate = toDate('2100-01-01'),\n\t\tRecordCreateDate = currentUTC(),\n\t\tRecordUpdateDate = currentUTC()) ~> InsertDerivedColumn\nInsertDerivedColumn alterRow(insertIf(1==1)) ~> AlterRowInsert\nConditionalSplit@UpdatedItem derive(RecordUpdateDate = currentUTC()) ~> UpdateDerivedColumn\nUpdateDerivedColumn alterRow(updateIf(1==1)) ~> AlterRowUpdate\nAlterRowInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTeamCode,\n\t\tLocation,\n\t\tNickName,\n\t\tConferenceCode,\n\t\tDivisionName,\n\t\tRecordHash = StageRecordHash,\n\t\tTeamKey = NewTeamKey,\n\t\tDWIsCurrent,\n\t\tDWEffectiveStartDate = LastUpdateDate,\n\t\tDWEffectiveEndDate,\n\t\tRecordCreateDate,\n\t\tRecordUpdateDate\n\t)) ~> InsertSink\nAlterRowUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TeamKey'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTeamCode,\n\t\tLocation,\n\t\tNickName,\n\t\tConferenceCode,\n\t\tDivisionName,\n\t\tRecordHash = StageRecordHash,\n\t\tTeamKey = DimTeamKey,\n\t\tRecordUpdateDate,\n\t\tDWEffectiveStartDate = LastUpdateDate\n\t)) ~> UpdateSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stgTeam')]",
				"[concat(variables('factoryId'), '/datasets/ds_dimTeam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoadDimTeamType2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_stgTeam",
								"type": "DatasetReference"
							},
							"name": "StageTable"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "DimTable"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "MaxTeamKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "InsertSink"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "UpdateSink"
						}
					],
					"transformations": [
						{
							"name": "StageHash"
						},
						{
							"name": "Exists"
						},
						{
							"name": "Lookup"
						},
						{
							"name": "DimTableRenameCols"
						},
						{
							"name": "JoinMax"
						},
						{
							"name": "SurrogateKey"
						},
						{
							"name": "InsertDerivedColumn"
						},
						{
							"name": "AlterRowInsert"
						},
						{
							"name": "ConditionalSplit"
						},
						{
							"name": "UpdateDerivedColumn"
						},
						{
							"name": "AlterRowUpdate"
						}
					],
					"script": "source(output(\n\t\tTeamCode as string,\n\t\tLocation as string,\n\t\tNickName as string,\n\t\tConferenceCode as string,\n\t\tDivisionName as string,\n\t\tLastUpdateDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StageTable\nsource(output(\n\t\tTeamKey as integer,\n\t\tTeamCode as string,\n\t\tRecordHash as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT TeamKey, TeamCode, RecordHash\\nFROM zmy01_dim_team\\nWHERE DWIsCurrent = 1',\n\tformat: 'query') ~> DimTable\nsource(output(\n\t\tMaxTeamKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT MaxTeamKey = ISNULL(MAX(TeamKey), 0)\\nFROM zmy01_dim_team',\n\tformat: 'query') ~> MaxTeamKey\nStageTable derive(StageRecordHash = sha2(256, TeamCode, Location, NickName, ConferenceCode, DivisionName)) ~> StageHash\nStageHash, DimTableRenameCols exists(StageRecordHash == DimRecordHash,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists\nExists, DimTableRenameCols lookup(TeamCode == DimTeamCode,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup\nDimTable select(mapColumn(\n\t\tDimTeamKey = TeamKey,\n\t\tDimTeamCode = TeamCode,\n\t\tDimRecordHash = RecordHash\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimTableRenameCols\nLookup, MaxTeamKey join(1==1,\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMax\nJoinMax keyGenerate(output(NewTeamKey as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SurrogateKey\nSurrogateKey derive(NewTeamKey = NewTeamKey + MaxTeamKey,\n\t\tDWIsCurrent = 1,\n\t\tDWEffectiveEndDate = toDate('2100-01-01'),\n\t\tRecordCreateDate = currentUTC(),\n\t\tRecordUpdateDate = currentUTC()) ~> InsertDerivedColumn\nInsertDerivedColumn alterRow(insertIf(1==1)) ~> AlterRowInsert\nLookup split(!isNull(DimTeamKey),\n\tdisjoint: false) ~> ConditionalSplit@(RecordsToBeUpdated, NewRecordsDoNotProcess)\nConditionalSplit@RecordsToBeUpdated derive(DWIsCurrent = 0,\n\t\tDWEffectiveEndDate = LastUpdateDate,\n\t\tRecordUpdateDate = currentUTC()) ~> UpdateDerivedColumn\nUpdateDerivedColumn alterRow(updateIf(1==1)) ~> AlterRowUpdate\nAlterRowInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTeamCode,\n\t\tLocation,\n\t\tNickName,\n\t\tConferenceCode,\n\t\tDivisionName,\n\t\tDWEffectiveStartDate = LastUpdateDate,\n\t\tRecordHash = StageRecordHash,\n\t\tTeamKey = NewTeamKey,\n\t\tDWIsCurrent,\n\t\tDWEffectiveEndDate,\n\t\tRecordCreateDate,\n\t\tRecordUpdateDate\n\t)) ~> InsertSink\nAlterRowUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TeamKey'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTeamKey = DimTeamKey,\n\t\tDWIsCurrent,\n\t\tDWEffectiveEndDate,\n\t\tRecordUpdateDate\n\t)) ~> UpdateSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stgTeam')]",
				"[concat(variables('factoryId'), '/datasets/ds_dimTeam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoadDimTeamType2_V2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "SCD Dim Type 2 - V2: source StageTable first removes duplicate business keys and just takes the last record",
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_stgTeam",
								"type": "DatasetReference"
							},
							"name": "StageTable"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "DimTable"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "MaxTeamKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "InsertSink"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "UpdateSink"
						}
					],
					"transformations": [
						{
							"name": "StageHash"
						},
						{
							"name": "Exists"
						},
						{
							"name": "Lookup"
						},
						{
							"name": "DimTableRenameCols"
						},
						{
							"name": "JoinMax"
						},
						{
							"name": "SurrogateKey"
						},
						{
							"name": "InsertDerivedColumn"
						},
						{
							"name": "AlterRowInsert"
						},
						{
							"name": "ConditionalSplit"
						},
						{
							"name": "UpdateDerivedColumn"
						},
						{
							"name": "AlterRowUpdate"
						}
					],
					"script": "source(output(\n\t\tTeamCode as string,\n\t\tLocation as string,\n\t\tNickName as string,\n\t\tConferenceCode as string,\n\t\tDivisionName as string,\n\t\tLastUpdateDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT dup.* \\nFROM\\n(\\n   SELECT ROW_NUMBER() OVER (PARTITION BY TeamCode ORDER BY LastUpdateDate desc) AS val\\n , stg.*\\n FROM zmy01_stg_team stg\\n) dup\\nWHERE dup.val = 1\\n',\n\tformat: 'query') ~> StageTable\nsource(output(\n\t\tTeamKey as integer,\n\t\tTeamCode as string,\n\t\tRecordHash as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT TeamKey, TeamCode, RecordHash\\nFROM zmy01_dim_team\\nWHERE DWIsCurrent = 1',\n\tformat: 'query') ~> DimTable\nsource(output(\n\t\tMaxTeamKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT MaxTeamKey = ISNULL(MAX(TeamKey), 0)\\nFROM zmy01_dim_team',\n\tformat: 'query') ~> MaxTeamKey\nStageTable derive(StageRecordHash = sha2(256, TeamCode, Location, NickName, ConferenceCode, DivisionName)) ~> StageHash\nStageHash, DimTableRenameCols exists(StageRecordHash == DimRecordHash,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists\nExists, DimTableRenameCols lookup(TeamCode == DimTeamCode,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup\nDimTable select(mapColumn(\n\t\tDimTeamKey = TeamKey,\n\t\tDimTeamCode = TeamCode,\n\t\tDimRecordHash = RecordHash\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimTableRenameCols\nLookup, MaxTeamKey join(1==1,\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMax\nJoinMax keyGenerate(output(NewTeamKey as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SurrogateKey\nSurrogateKey derive(NewTeamKey = NewTeamKey + MaxTeamKey,\n\t\tDWIsCurrent = 1,\n\t\tDWEffectiveEndDate = toDate('2100-01-01'),\n\t\tRecordCreateDate = currentUTC(),\n\t\tRecordUpdateDate = currentUTC()) ~> InsertDerivedColumn\nInsertDerivedColumn alterRow(insertIf(1==1)) ~> AlterRowInsert\nLookup split(!isNull(DimTeamKey),\n\tdisjoint: false) ~> ConditionalSplit@(RecordsToBeUpdated, NewRecordsDoNotProcess)\nConditionalSplit@RecordsToBeUpdated derive(DWIsCurrent = 0,\n\t\tDWEffectiveEndDate = LastUpdateDate,\n\t\tRecordUpdateDate = currentUTC()) ~> UpdateDerivedColumn\nUpdateDerivedColumn alterRow(updateIf(1==1)) ~> AlterRowUpdate\nAlterRowInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTeamCode,\n\t\tLocation,\n\t\tNickName,\n\t\tConferenceCode,\n\t\tDivisionName,\n\t\tDWEffectiveStartDate = LastUpdateDate,\n\t\tRecordHash = StageRecordHash,\n\t\tTeamKey = NewTeamKey,\n\t\tDWIsCurrent,\n\t\tDWEffectiveEndDate,\n\t\tRecordCreateDate,\n\t\tRecordUpdateDate\n\t)) ~> InsertSink\nAlterRowUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TeamKey'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTeamKey = DimTeamKey,\n\t\tDWIsCurrent,\n\t\tDWEffectiveEndDate,\n\t\tRecordUpdateDate\n\t)) ~> UpdateSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stgTeam')]",
				"[concat(variables('factoryId'), '/datasets/ds_dimTeam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoadDimTeamType2_V2_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "From source DimTable removed WHERE DWIsCurrent = 1",
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_stgTeam",
								"type": "DatasetReference"
							},
							"name": "StageTable"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "DimTable"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "MaxTeamKey"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "InsertSink"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "UpdateSink"
						}
					],
					"transformations": [
						{
							"name": "StageHash"
						},
						{
							"name": "Exists"
						},
						{
							"name": "Lookup"
						},
						{
							"name": "DimTableRenameCols"
						},
						{
							"name": "JoinMax"
						},
						{
							"name": "SurrogateKey"
						},
						{
							"name": "InsertDerivedColumn"
						},
						{
							"name": "AlterRowInsert"
						},
						{
							"name": "ConditionalSplit"
						},
						{
							"name": "UpdateDerivedColumn"
						},
						{
							"name": "AlterRowUpdate"
						}
					],
					"script": "source(output(\n\t\tTeamCode as string,\n\t\tLocation as string,\n\t\tNickName as string,\n\t\tConferenceCode as string,\n\t\tDivisionName as string,\n\t\tLastUpdateDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StageTable\nsource(output(\n\t\tTeamKey as integer,\n\t\tTeamCode as string,\n\t\tRecordHash as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT TeamKey, TeamCode, RecordHash\\nFROM zmy01_dim_team',\n\tformat: 'query') ~> DimTable\nsource(output(\n\t\tMaxTeamKey as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT MaxTeamKey = ISNULL(MAX(TeamKey), 0)\\nFROM zmy01_dim_team',\n\tformat: 'query') ~> MaxTeamKey\nStageTable derive(StageRecordHash = sha2(256, TeamCode, Location, NickName, ConferenceCode, DivisionName)) ~> StageHash\nStageHash, DimTableRenameCols exists(StageRecordHash == DimRecordHash,\n\tnegate:true,\n\tbroadcast: 'auto')~> Exists\nExists, DimTableRenameCols lookup(TeamCode == DimTeamCode,\n\tmultiple: false,\n\tpickup: 'any',\n\tbroadcast: 'auto')~> Lookup\nDimTable select(mapColumn(\n\t\tDimTeamKey = TeamKey,\n\t\tDimTeamCode = TeamCode,\n\t\tDimRecordHash = RecordHash\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> DimTableRenameCols\nLookup, MaxTeamKey join(1==1,\n\tjoinType:'cross',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'auto')~> JoinMax\nJoinMax keyGenerate(output(NewTeamKey as long),\n\tstartAt: 1L,\n\tstepValue: 1L) ~> SurrogateKey\nSurrogateKey derive(NewTeamKey = NewTeamKey + MaxTeamKey,\n\t\tDWIsCurrent = 1,\n\t\tDWEffectiveEndDate = toDate('2100-01-01'),\n\t\tRecordCreateDate = currentUTC(),\n\t\tRecordUpdateDate = currentUTC()) ~> InsertDerivedColumn\nInsertDerivedColumn alterRow(insertIf(1==1)) ~> AlterRowInsert\nLookup split(!isNull(DimTeamKey),\n\tdisjoint: false) ~> ConditionalSplit@(RecordsToBeUpdated, NewRecordsDoNotProcess)\nConditionalSplit@RecordsToBeUpdated derive(DWIsCurrent = 0,\n\t\tDWEffectiveEndDate = LastUpdateDate,\n\t\tRecordUpdateDate = currentUTC()) ~> UpdateDerivedColumn\nUpdateDerivedColumn alterRow(updateIf(1==1)) ~> AlterRowUpdate\nAlterRowInsert sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTeamCode,\n\t\tLocation,\n\t\tNickName,\n\t\tConferenceCode,\n\t\tDivisionName,\n\t\tDWEffectiveStartDate = LastUpdateDate,\n\t\tRecordHash = StageRecordHash,\n\t\tTeamKey = NewTeamKey,\n\t\tDWIsCurrent,\n\t\tDWEffectiveEndDate,\n\t\tRecordCreateDate,\n\t\tRecordUpdateDate\n\t)) ~> InsertSink\nAlterRowUpdate sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['TeamKey'],\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTeamKey = DimTeamKey,\n\t\tDWIsCurrent,\n\t\tDWEffectiveEndDate,\n\t\tRecordUpdateDate\n\t)) ~> UpdateSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stgTeam')]",
				"[concat(variables('factoryId'), '/datasets/ds_dimTeam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LoadFactScore')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "zmy01_IncLoad_SCD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_stgScore",
								"type": "DatasetReference"
							},
							"name": "StagingScore"
						},
						{
							"dataset": {
								"referenceName": "ds_dimTeam",
								"type": "DatasetReference"
							},
							"name": "DimTeam"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_factScore",
								"type": "DatasetReference"
							},
							"name": "FactScore"
						}
					],
					"transformations": [
						{
							"name": "GetTeamKey"
						}
					],
					"script": "source(output(\n\t\tTeamCode as string,\n\t\tScore as integer,\n\t\tLastUpdateDate as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> StagingScore\nsource(output(\n\t\tTeamKey as integer,\n\t\tTeamCode as string,\n\t\tDWEffectiveStartDate as timestamp,\n\t\tDWEffectiveEndDate as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tquery: 'SELECT TeamKey, TeamCode, DWEffectiveStartDate, DWEffectiveEndDate FROM zmy01_dim_team',\n\tformat: 'query') ~> DimTeam\nStagingScore, DimTeam join(StagingScore@TeamCode == DimTeam@TeamCode\n\t&& LastUpdateDate >= DWEffectiveStartDate\n\t&& LastUpdateDate < DWEffectiveEndDate,\n\tjoinType:'left',\n\tmatchType:'exact',\n\tignoreSpaces: false,\n\tbroadcast: 'both')~> GetTeamKey\nGetTeamKey sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tTeamKey as integer,\n\t\tTeamCode as string,\n\t\tScore as integer,\n\t\tLastUpdateDate as timestamp\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tTeamKey,\n\t\tTeamCode = StagingScore@TeamCode,\n\t\tScore,\n\t\tLastUpdateDate\n\t)) ~> FactScore"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stgScore')]",
				"[concat(variables('factoryId'), '/datasets/ds_dimTeam')]",
				"[concat(variables('factoryId'), '/datasets/ds_factScore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dfw_CarsTestAAA')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "WranglingDataFlow",
				"folder": {
					"name": "zmy00_Misc"
				},
				"typeProperties": {
					"sources": [
						{
							"name": "ds_inputCars1",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~>  ds_inputCars1",
							"dataset": {
								"referenceName": "ds_inputCars1",
								"type": "DatasetReference"
							}
						},
						{
							"name": "ds_inputCars2",
							"script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~>  ds_inputCars2",
							"dataset": {
								"referenceName": "ds_inputCars2",
								"type": "DatasetReference"
							}
						}
					],
					"script": "section Section1;\r\nshared ds_inputCars1 = let\r\n  AdfDoc = Web.Contents(\"https://bajlecblob.blob.core.windows.net/dfwinput/cars1.csv?sv=2018-03-28&sig=gfcAewXfINxxN69F76TZ2w4c0Xq6J71hMtKghe2KfYI%3D&spr=https&se=2020-09-25T12%3A57%3A57Z&srt=sco&ss=bf&sp=rwl\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared ds_inputCars2 = let\r\n  AdfDoc = Web.Contents(\"https://bajlecblob.blob.core.windows.net/dfwinput/cars2.csv?sv=2018-03-28&sig=gfcAewXfINxxN69F76TZ2w4c0Xq6J71hMtKghe2KfYI%3D&spr=https&se=2020-09-25T12%3A57%3A57Z&srt=sco&ss=bf&sp=rwl\"),\r\n  Csv = Csv.Document(AdfDoc, [Delimiter = \",\", Encoding = TextEncoding.Utf8, QuoteStyle = QuoteStyle.Csv]),\r\n  PromotedHeaders = Table.PromoteHeaders(Csv, [PromoteAllScalars = true])\r\nin\r\n  PromotedHeaders;\r\nshared UserQuery = let\r\n  Source = ds_inputCars1,\r\n  #\"Added custom\" = Table.AddColumn(Source, \"MakeModel\", each [Make] & \"-\" & [Model]),\r\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Added custom\", {{\"MakeModel\", type text}, {\"Length\", Int64.Type}}),\r\n  #\"Merged queries\" = Table.NestedJoin(#\"Changed column type\", {\"Make\"}, ds_inputCars2, {\"Make\"}, \"ds_inputCars2\", JoinKind.LeftOuter),\r\n  #\"Expanded ds_inputCars2\" = Table.ExpandTableColumn(#\"Merged queries\", \"ds_inputCars2\", {\"Origin\"}, {\"Origin\"})\r\nin\r\n  #\"Expanded ds_inputCars2\";\r\n"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_inputCars1')]",
				"[concat(variables('factoryId'), '/datasets/ds_inputCars2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ablob_bajlecblob_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Inputblob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "tumblingwindow"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "circuits.csv",
						"folderPath": "src",
						"container": "tumblingwindow"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Inputblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_ablob_bajlecblob_tgt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Inputblob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"p_window_end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "tumblingwindow"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@formatDateTime(dataset().p_window_end_date, 'yyyy-MM-dd')",
							"type": "Expression"
						},
						"container": "tumblingwindow"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Inputblob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_copy_circuits')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy circuits",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_ablob_bajlecblob_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ds_ablob_bajlecblob_tgt",
								"type": "DatasetReference",
								"parameters": {
									"p_window_end_date": {
										"value": "@pipeline().parameters.p_window_end_date",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"p_window_end_date": {
						"type": "string"
					}
				},
				"folder": {
					"name": "tumblingwindow"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_ablob_bajlecblob_src')]",
				"[concat(variables('factoryId'), '/datasets/ds_ablob_bajlecblob_tgt')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tr_tumbling_window')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pl_copy_circuits",
						"type": "PipelineReference"
					},
					"parameters": {
						"p_window_end_date": "[parameters('tr_tumbling_window_properties_pipeline_parameters_p_window_end_date')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2022-07-01T22:00:00Z",
					"endTime": "2022-07-05T22:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 1,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pl_copy_circuits')]"
			]
		}
	]
}